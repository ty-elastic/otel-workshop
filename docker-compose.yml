services:
  catalog:
    build:
      context: ./src/catalog/
    restart: on-failure
    volumes:
      - ./logs:/logs
    command: ["-logfile=/logs/catalog.json"]
    ports:
      - "9000:9000"
    environment:
      POSTGRES_PASSWORD: "password"
      POSTGRES_USER: "admin"
      POSTGRES_ADDR: "postgresql"

      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      OTEL_SERVICE_NAME: "catalog"
    depends_on:
      postgresql:
        condition: service_healthy
      collector:
        condition: service_started

  store:
    build:
      context: ./src/store/
    restart: on-failure
    healthcheck:
      test: curl --fail http://127.0.0.1:9001/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 60s
    ports:
      - "9001:9001"
      - "9090:9090"
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      OTEL_SERVICE_NAME: "store"
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: "true"
      OTEL_PYTHON_EXCLUDED_URLS: "/health"
    command: ["opentelemetry-instrument", "--logs_exporter", "otlp", "flask", "run", "--host=0.0.0.0", "-p", "9001"]
    depends_on:
      catalog:
        condition: service_started
      collector:
        condition: service_started
      redis:
        condition: service_started

  postgresql:
    image: postgres:latest
    restart: on-failure
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "MUSIC"
      POSTGRES_PASSWORD: "password"
      POSTGRES_USER: "admin"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "MUSIC", "-U", "admin" ]
      interval : 5s
      timeout : 5s
      retries : 5

  collector:
    image: otel/opentelemetry-collector-contrib
    restart: on-failure
    ports:
      - "4317:4317"
    volumes:
      - ./logs:/logs
      - ./src/collector/collector.yml:/collector.yml
    command: ["--config=/collector.yml"]
    environment:
      ELASTIC_APM_SERVER_ENDPOINT: ${ELASTIC_APM_SERVER_ENDPOINT}
      ELASTIC_APM_SERVER_SECRET: ${ELASTIC_APM_SERVER_SECRET}

  redis:
    image: redis
    command: [redis-server]
    ports:
      - '6379:6379'

  frontend:
    platform: "linux/amd64"
    build:
      context: ./src/frontend/
      args:
        ELASTIC_APM_SERVER_RUM_ENDPOINT: ${ELASTIC_APM_SERVER_RUM_ENDPOINT}
        ELASTIC_APM_SERVER_RUM_CREDENTIALS: ${ELASTIC_APM_SERVER_RUM_CREDENTIALS}
    volumes:
      - ./logs:/var/log/nginx
    ports:
      - '9394:80'
    environment:
      - OTEL_SERVICE_NAME=proxy
    depends_on:
      store:
        condition: service_started
      collector:
        condition: service_started

  instruqt_frontend:
    build:
      context: ./src/instruqt_frontend/
    ports:
      - '9393:80'
    depends_on:
      frontend:
        condition: service_started